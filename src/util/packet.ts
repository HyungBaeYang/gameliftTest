import { ERROR_TYPE } from "./ResultType";

const encTable = [
    0xf4, 0x4c, 0xc8, 0xd4, 0x1d, 0x8d, 0x2f, 0x48, 0xc5,
    0xb4, 0x47, 0xa2, 0xc7, 0x9, 0x30, 0x3c, 0x61, 0x7d,
    0x7f, 0xcf, 0xe6, 0x7c, 0x64, 0xb2, 0xc8, 0xf0, 0x41,
    0xf4, 0x22, 0xe8, 0x6, 0x96, 0x71, 0x15, 0x4d, 0xcf,
    0xc7, 0x42, 0xaf, 0x84, 0x36, 0x6e, 0x94, 0xc1, 0x5b,
    0x15, 0x43, 0xfa, 0x66, 0x97, 0x5f, 0x65, 0x15, 0x97,
    0x8a, 0x73, 0xb7, 0xde, 0x2c, 0x8b, 0xbc, 0xd9, 0x57,
    0xd5, 0xfb, 0x47, 0x12, 0xba, 0x5f, 0x1b, 0x90, 0xa5,
    0xa3, 0x36, 0x33, 0xdf, 0xac, 0xa9, 0xdb, 0xd9, 0x44,
    0x30, 0x5c, 0xfc, 0xb, 0xf, 0x7c, 0x98, 0x4b, 0x1d,
    0x2e, 0x82, 0x63, 0x89, 0x1e, 0xdf, 0x1c, 0x66, 0x2f,
    0xf5, 0x1f, 0x85, 0x99, 0x20, 0x2, 0xc1, 0x2d, 0xd,
    0x14, 0xd5, 0xb3, 0x6a, 0xb2, 0x87, 0xc8, 0x93, 0x57,
    0xb9, 0xeb, 0xb, 0x63, 0x35, 0x44, 0x19, 0xc3, 0xb6,
    0xcd, 0xb4, 0xcf, 0x91, 0x84, 0x49, 0x2a, 0x1b, 0x16,
    0x3a, 0xe6, 0x5c, 0x3e, 0x8c, 0x68, 0xa0, 0x89, 0x64,
    0x41, 0x7e, 0xf7, 0xb4, 0x3a, 0xed, 0x3d, 0x9b, 0x93,
    0x42, 0xf0, 0x1a, 0x96, 0x92, 0xc4, 0xb2, 0xcc, 0x54,
    0x24, 0x8e, 0x1c, 0xac, 0xff, 0xfa, 0x3c, 0x78, 0x4b,
    0xba, 0x89, 0xf6, 0xcd, 0xb9, 0x5e, 0x35, 0xf, 0x9a,
    0x16, 0xb2, 0x3f, 0xd0, 0x31, 0x44, 0x76, 0xda, 0xb3,
    0x1d, 0xc7, 0x89, 0x73, 0x3, 0x4b, 0x60, 0x56, 0x70,
    0xf0, 0xfc, 0xa9, 0x35, 0x3a, 0x48, 0xc0, 0xef, 0x30,
    0x8b, 0x2e, 0xe5, 0x75, 0x2a, 0xa6, 0x8d, 0x1f, 0xa9,
    0x78, 0x28, 0x41, 0xc, 0x38, 0xe3, 0xa9, 0xc4, 0x93,
    0x1e, 0x71, 0x3e, 0xc9, 0x32, 0x26, 0xd8, 0xea, 0x60,
    0x6d, 0xd8, 0x6d, 0xa9, 0xd0, 0xa, 0x35, 0xe8, 0x94,
    0x7a, 0xd, 0xa4, 0x9c, 0x9b, 0x7a, 0x5a, 0xbb, 0x7,
    0x32, 0x5e, 0xe, 0xf3
];

export function decrypt(request: any)
{
    let keyIdx = request.body[0];
    let recvCheck = request.body[1];
    let dataSize = request.body.length;
    let sel = 0;

    let keytmp = keyIdx & 0xe0;
    
    recvCheck ^= keyIdx;

    keyIdx = keyIdx & 0x1f;
    keyIdx = (keyIdx << 3) | (keytmp >> 5);

    let check1 = 0;
    let check2 = 0;

    for(let i = 2; i < dataSize ; i++)
    {
        keyIdx %= 256;
        
        sel = keyIdx % 4;
        
        check1 += Number(request.body[i]);

        switch(sel)
        {
            case 0:
                request.body[i] = request.body[i] ^ encTable[keyIdx];
                break;
            case 1:
                request.body[i] = request.body[i] + ( encTable[keyIdx] >> 2);
                break;
            case 2:
                request.body[i] = request.body[i] - ( encTable[keyIdx] << 4);
                break;
            case 3:
                request.body[i] = request.body[i] + ( encTable[keyIdx] >> 3);
                break;				
        }

        check2 += request.body[i];

        keyIdx++;
    }

    let check = 0;

    if(check1 > check2)
        check = (check1 - check2) % 256;
    else
        check = (check2 - check1) % 256;

    if(recvCheck != check)
    {
        console.log("recv packet check error recvCheck :" + recvCheck + " check :" + check + "check1 :"+ check1 + "check 2 :" + check2);
        return;
    }

    request.body = JSON.parse(request.body.toString("utf8",2));
}

function getRandomInt(min: any, max: any) {
    return Math.floor(Math.random() * (max - min)) + min;
}

export function encrypt(res: any, data: any)
{
    let dataBuf = Buffer.from(data, "binary");

    let keyIdx = getRandomInt(0, 256);
    let keytmp = keyIdx & 0x07;

    dataBuf[0] = (keyIdx >> 3) | (keytmp << 5);

    let dataSize = data.length;

    let sel = 0;

    let check1 = 0;
    let check2 = 0;

    for(let i = 2; i < dataSize ; i++)
    {
        keyIdx %= 256;
        
        sel = keyIdx % 4;
        
        check1 += dataBuf[i];

        switch(sel)
        {
            case 0:
                dataBuf[i] = dataBuf[i] ^ encTable[keyIdx];
                break;
            case 1:
                dataBuf[i] = dataBuf[i] - ( encTable[keyIdx] >> 2);
                break;
            case 2:
                dataBuf[i] = dataBuf[i] + ( encTable[keyIdx] << 4);
                break;
            case 3:
                dataBuf[i] = dataBuf[i] - ( encTable[keyIdx] >> 3);
                break;				
        }

        check2 += dataBuf[i];

        keyIdx++;
    }

    if(check1 > check2)    
        dataBuf[1] = (check1 - check2) % 256;
    else
        dataBuf[1] = (check2 - check1) % 256;      

    dataBuf[1] ^= dataBuf[0];

    res.send(dataBuf);
}

export function send( res: any, data: any ) {

    if ( undefined == data ) {
        console.log("send data not found");
        data = {"result": ERROR_TYPE.WRONG_PARAMETER};
    }

    if(Number(process.env.SECURITY))
    {
        encrypt(res, "  "+JSON.stringify(data));
    }
    else
    {
        res.send(data);
    }
}